# Manual Técnico del Sistema de Gestión de Ventas "Peleteria Jeylor"

Este documento detalla la arquitectura, tecnologías, estructura y aspectos técnicos del sistema de gestión de ventas "Peleteria Jeylor". Está diseñado para desarrolladores y personal técnico que necesiten comprender, mantener o extender el sistema.

## 1. Arquitectura del Sistema

El sistema es una aplicación web full-stack con una arquitectura cliente-servidor, compuesta por un backend (API) y un frontend (interfaz de usuario).

*   **Frontend:** Aplicación de una sola página (SPA) desarrollada con React. Se comunica con el backend a través de peticiones HTTP (RESTful API).
*   **Backend:** API RESTful construida con FastAPI, que maneja la lógica de negocio, la interacción con la base de datos y la autenticación.
*   **Base de Datos:** SQLite, una base de datos ligera basada en archivos, utilizada para almacenar toda la información del sistema.

## 2. Tecnologías Utilizadas

### 2.1 Backend (API RESTful)

*   **Lenguaje:** Python 3.x
*   **Framework Web:** FastAPI (versión moderna y de alto rendimiento para construir APIs).
*   **ORM (Object-Relational Mapper):** SQLAlchemy (para la interacción con la base de datos de forma orientada a objetos).
*   **Base de Datos:** SQLite (archivo `sales.db`).
*   **Seguridad:**
    *   **Hashing de Contraseñas:** Passlib (para el almacenamiento seguro de contraseñas).
    *   **Autenticación:** JSON Web Tokens (JWT) para la autenticación de usuarios.
*   **Configuración:** python-dotenv (para la gestión de variables de entorno, como la `SECRET_KEY` de JWT).
*   **Servidor ASGI:** Uvicorn (servidor web asíncrono para ejecutar aplicaciones ASGI como FastAPI).

### 2.2 Frontend (Interfaz de Usuario)

*   **Librería JavaScript:** React (para construir la interfaz de usuario interactiva).
*   **Enrutamiento:** React Router DOM (para la navegación entre las diferentes vistas de la aplicación).
*   **Cliente HTTP:** Axios (para realizar peticiones HTTP al backend).
*   **Librería de Componentes UI:** Material-UI (MUI) (para un diseño moderno y responsivo, siguiendo los principios de Material Design).
*   **Notificaciones:** React Toastify (para mostrar mensajes y alertas al usuario).
*   **Visualización de Datos:** Chart.js / React-Chartjs-2 (utilizado en los módulos de reportes para gráficos).

## 3. Estructura del Proyecto

```
AppWeb_PelJeylor/
├── backend/                # Contiene el código del backend (API FastAPI)
│   ├── main.py             # Punto de entrada de la API, definición de rutas, modelos Pydantic, lógica de autenticación.
│   ├── models.py           # Definiciones de modelos de base de datos (SQLAlchemy ORM). Representa las tablas de la DB.
│   ├── schemas.py          # Esquemas de datos (Pydantic). Define la estructura de los datos para validación de entrada y serialización de salida de la API.
│   ├── crud.py             # Operaciones CRUD (Create, Read, Update, Delete) para interactuar con la base de datos.
│   ├── database.py         # Configuración de la conexión a la base de datos SQLite.
│   └── requirements.txt    # Lista de dependencias de Python para el backend.
├── frontend/               # Contiene el código del frontend (Aplicación React)
│   ├── public/             # Archivos estáticos que se sirven directamente (index.html, imágenes, favicon).
│   ├── src/                # Código fuente principal de la aplicación React.
│   │   ├── api.js          # Configuración de la instancia de Axios para las llamadas al backend, incluyendo la `baseURL`.
│   │   ├── App.js          # Componente principal de la aplicación, maneja el enrutamiento y la estructura general.
│   │   └── components/     # Directorio que contiene todos los componentes reutilizables de la interfaz de usuario (ej. Clientes, Productos, OrdenesTrabajo, Login, Reportes).
│   └── package.json        # Define las dependencias de Node.js y scripts para el frontend.
├── sales.db                # Archivo de la base de datos SQLite. Se crea automáticamente al iniciar el backend si no existe.
├── start_project.bat       # Script de Windows para iniciar ambos servidores (backend y frontend) simultáneamente.
└── README.md               # Documentación general del proyecto.
```

## 4. Base de Datos (`sales.db`)

*   **Tipo:** SQLite.
*   **Ubicación:** Archivo `sales.db` en el directorio raíz del proyecto.
*   **Generación:** Se crea automáticamente la primera vez que se inicia el servidor backend.
*   **Esquema:** Definido en `backend/models.py` utilizando SQLAlchemy. Incluye tablas para usuarios, roles, clientes, productos, ventas, órdenes de trabajo, etc.
*   **Herramientas:** Puede ser gestionada y visualizada con herramientas como DB Browser for SQLite.

## 5. API Backend (FastAPI)

*   **Punto de Entrada:** `backend/main.py`.
*   **Documentación Interactiva:** FastAPI genera automáticamente documentación de la API.
    *   **Swagger UI:** Accesible en `http://localhost:8000/docs` (cuando el backend está en ejecución).
    *   **ReDoc:** Accesible en `http://localhost:8000/redoc` (cuando el backend está en ejecución).
*   **Endpoints:** Definidos en `main.py` y utilizan los esquemas de `schemas.py` para la validación de datos y las funciones de `crud.py` para la interacción con la base de datos.
*   **Autenticación:** Los endpoints protegidos requieren un token JWT válido en el encabezado `Authorization`.

## 6. Configuración y Ejecución

### 6.1 Requisitos Previos

*   Python 3.x y pip.
*   Node.js y npm.

### 6.2 Pasos de Configuración

1.  **Backend:**
    *   Navegar a `backend/`.
    *   Crear y activar un entorno virtual (`python -m venv venv`).
    *   Instalar dependencias (`pip install -r requirements.txt`).
    *   **Seguridad:** Configurar `SECRET_KEY` en un archivo `.env` en el directorio `backend` (recomendado para producción).
2.  **Frontend:**
    *   Navegar a `frontend/`.
    *   Instalar dependencias (`npm install`).
    *   Configurar `baseURL` de Axios en `frontend/src/api.js` si el backend no está en `http://localhost:8000`.

### 6.3 Ejecución

*   **Windows (Script):** Ejecutar `start_project.bat` desde la raíz del proyecto.
*   **Manual (Multiplataforma):**
    *   **Backend:** Desde `backend/`, activar venv y ejecutar `uvicorn main:app --host 0.0.0.0 --port 8000 --reload`.
    *   **Frontend:** Desde `frontend/`, ejecutar `npm start`.

## 7. Consideraciones de Seguridad

*   **`SECRET_KEY` de JWT:** **CRÍTICO** moverla a una variable de entorno (`.env`) en producción y usar una clave larga y aleatoria.
*   **Credenciales por Defecto:** Cambiar las credenciales del usuario `admin` por defecto (`admin`/`adminpass`) inmediatamente en un entorno de producción.

## 8. Pruebas

Actualmente, el proyecto **no cuenta con pruebas automatizadas**.
*   **Recomendación Backend:** Implementar pruebas unitarias y de integración con `pytest`.
*   **Recomendación Frontend:** Implementar pruebas unitarias para componentes con `@testing-library/react` y `jest`.

## 9. Despliegue

### 9.1 Backend

*   Usar un servidor de aplicaciones ASGI como Gunicorn o Uvicorn en modo producción.
*   Considerar Dockerización para un despliegue consistente.

### 9.2 Frontend

*   Construir la aplicación (`npm run build`).
*   Servir los archivos estáticos con un servidor web (Nginx, Apache) o integrarlos en el backend FastAPI.
*   Utilizar servicios de hosting estático o plataformas PaaS (Netlify, Vercel).
